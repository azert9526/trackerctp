"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/helpers/drawingUtil.tsx":
/*!*************************************!*\
  !*** ./src/helpers/drawingUtil.tsx ***!
  \*************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getBussesPositions: () => (/* binding */ getBussesPositions),\n/* harmony export */   getRouteShapePositions: () => (/* binding */ getRouteShapePositions),\n/* harmony export */   getStopPositions: () => (/* binding */ getStopPositions)\n/* harmony export */ });\nfunction getStopPositions(tripId, tripStops, stopLocations) {\n    if (!tripId) return [];\n    const tripId0 = tripId + '_0';\n    const tripId1 = tripId + '_1';\n    const stops = [];\n    const tripStopsForId = tripStops.filter((tripStop)=>tripStop.trip_id === tripId0 || tripStop.trip_id === tripId1);\n    tripStopsForId.forEach((tripStop)=>{\n        const stopLocation = stopLocations.find((stop)=>stop.stop_id === tripStop.stop_id);\n        if (stopLocation) {\n            stops.push({\n                id: stopLocation.stop_id,\n                position: {\n                    lat: stopLocation.stop_lat,\n                    lng: stopLocation.stop_lon\n                },\n                color: tripStop.trip_id.endsWith('_0') ? 'red' : 'green'\n            });\n        }\n    });\n    const firstGreen = stops.findIndex((stop)=>stop.color === 'green');\n    return {\n        stops,\n        firstGreen\n    };\n}\nfunction getRouteShapePositions(shapeId, shapesData) {\n    if (!shapesData || !shapesData.length) {\n        console.warn('Shapes data is not available');\n        return [];\n    }\n    const shapePoints = shapesData.flat().filter((shape)=>shape.shape_id === shapeId).sort((a, b)=>a.shape_pt_sequence - b.shape_pt_sequence).map((point)=>({\n            lat: point.shape_pt_lat,\n            lng: point.shape_pt_lon\n        }));\n    return shapePoints;\n}\nfunction getBusData(vehicle, tripStops, stopLocations) {\n    var _tripStops_find, _tripStops_find1;\n    const data = {\n        id: vehicle.label,\n        position: {\n            lat: vehicle.latitude,\n            lng: vehicle.longitude\n        },\n        color: vehicle.trip_id.endsWith('_0') ? 'red' : 'green'\n    };\n    const stopLocationsForVehicle = stopLocations.filter((tripStop)=>tripStop.trip_id === vehicle.trip_id);\n    const startStop = stopLocationsForVehicle.find((stop)=>stop.stop_sequence === 0);\n    if (!startStop) {\n        console.warn(\"Stop distances could not be calculated.\");\n        return data;\n    }\n    const startStopLocation = tripStops.find((sl)=>sl.stop_id === startStop.stop_id);\n    const stopDistances = stopLocationsForVehicle.map((stop)=>{\n        const stopLocation = tripStops.find((sl)=>sl.stop_id === stop.stop_id);\n        if (stopLocation) {\n            const distanceToStop = calculateDistance(startStopLocation.stop_lat, startStopLocation.stop_lon, stopLocation.stop_lat, stopLocation.stop_lon);\n            return {\n                stop,\n                distance: distanceToStop\n            };\n        }\n        return null;\n    }).filter((stopDistance)=>stopDistance !== null);\n    const vehicleDistance = calculateDistance(startStopLocation.stop_lat, startStopLocation.stop_lon, vehicle.latitude, vehicle.longitude);\n    stopDistances.push({\n        stop: {\n            stop_id: 'vehicle',\n            stop_lat: vehicle.latitude,\n            stop_lon: vehicle.longitude\n        },\n        distance: vehicleDistance\n    });\n    stopDistances.sort((a, b)=>a.distance - b.distance);\n    let vehicleIndex = stopDistances.findIndex((stopDistance)=>stopDistance.stop.stop_id === 'vehicle');\n    const previousStop = vehicleIndex > 0 ? stopDistances[vehicleIndex - 1].stop : {\n        stop_id: null\n    };\n    const nextStop = vehicleIndex < stopDistances.length - 1 ? stopDistances[vehicleIndex + 1].stop : {\n        stop_id: null\n    };\n    const previousStopName = ((_tripStops_find = tripStops.find((sl)=>sl.stop_id === previousStop.stop_id)) === null || _tripStops_find === void 0 ? void 0 : _tripStops_find.stop_name) || 'At first stop';\n    const nextStopName = ((_tripStops_find1 = tripStops.find((sl)=>sl.stop_id === nextStop.stop_id)) === null || _tripStops_find1 === void 0 ? void 0 : _tripStops_find1.stop_name) || 'At last stop';\n    return {\n        ...data,\n        speed: vehicle.speed,\n        previousStopName: previousStopName,\n        nextStopName: nextStopName\n    };\n}\nfunction getBussesPositions(routeId, data, tripStops, stopLocations) {\n    if (!data || !routeId) return [];\n    const busData = data.flat().filter((vehicle)=>{\n        var _vehicle_route_id;\n        return ((_vehicle_route_id = vehicle.route_id) === null || _vehicle_route_id === void 0 ? void 0 : _vehicle_route_id.toString()) === routeId && vehicle.trip_id !== null && (vehicle.trip_id.endsWith('_0') || vehicle.trip_id.endsWith('_1'));\n    }).map((vehicle)=>getBusData(vehicle, tripStops, stopLocations));\n    return busData;\n}\nfunction calculateDistance(lat1, lon1, lat2, lon2) {\n    //Haversine formula\n    const R = 6371;\n    const dLat = (lat2 - lat1) * Math.PI / 180;\n    const dLon = (lon2 - lon1) * Math.PI / 180;\n    const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) * Math.sin(dLon / 2) * Math.sin(dLon / 2);\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    return R * c;\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/helpers/drawingUtil.tsx\n"));

/***/ })

});